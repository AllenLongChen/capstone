sigma <- impVolFunc(capT-t,K)
x <- log(S0/K)+r*(capT-t)
sig <- sigma*sqrt(capT-t)
d1 <- x/sig+sig/2
d2 <- d1 - sig
return(pnorm(-d2))
}
return(calc)
}
tdpdk <- function(params){
calc <- function(t,capT,K){
print(K)
sigma <- impVolFunc(capT-t,K)
x <- log(S0/K)+r*(capT-t)
sig <- sigma*sqrt(capT-t)
d1 <- x/sig+sig/2
d2 <- d1 - sig
return(pnorm(-d2))
}
return(calc)
}
setwd("/home/dongniu/capstone")
source("BlackScholes.R")
source("SVILocalVolToEurImpVol.R")
#######################################################
# params       is a list that consists of r, S0, iscall
# localVolFunc is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
# impVolFunc   is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
#######################################################
# formula 3.10
# returns a function that takes valuation time t,
# expiry capT, and strike K
getEarlyExerciseBoundaryFunc <- function(params,localVolFunc){
r <- params$r
func <- function(t,capT,K){
tau <- capT - t
sigl <- localVolFunc(tau,K)
gamma <- sigl/8/pi/r^2/K^2
return( K-sigl*sqrt(tau*log(gamma/tau*(1-2/log(tau/gamma)))) )
}
return(func)
}
# European option price function given implied vol
# returns a function that takes valuation time t
# expiry capT, and strike K
# P(T,K) can be obtained by calling
# getEuropeanPriceFunc(params,impVolFunc)(0,T,K)
getEuropeanPriceFunc <- function(params,impVolFunc){
r <- params$r
S0 <- params$S0
iscall <- params$iscall
if (iscall) {return( function(t,capT,K){BSFormula(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
else {return( function(t,capT,K){BSFormulaPut(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
}
# formula 3.11
# returns a function that takes time to expiry and strike
getAmericanPriceFunc <- function(params,localVolFunc,impVolFunc){
getEarlyExercisePremium <- function(Texp,K){
S0 <- params$S0
r  <- params$r
dPdKFunc <- function(params){
calc <- function(t,capT,K){
print(K)
sigma <- 0.2
x <- log(S0/K)+r*(capT-t)
sig <- sigma*sqrt(capT-t)
d1 <- x/sig+sig/2
d2 <- d1 - sig
return(pnorm(-d2))
}
return(calc)
}
dt <- Texp/100
############### two 0.01s that need to be taken care of
ts <- seq(0.01,Texp,by=dt)
integrands <- sapply(ts,function(t){dPdKFunc(params)(0.01,t,getEarlyExerciseBoundaryFunc(params,localVolFunc)(t,Texp,K))})
##############
return(r*K*sum(1/2*(integrands[-1]+integrands[-length(integrands)])*dt))
}
americanFunc <- function(Texp,K){
euroOptPrice <- getEuropeanPriceFunc(params,impVolFunc)(0,Texp,K)
earlyExercisePrem <- getEarlyExercisePremium(Texp,K)
return(euroOptPrice+earlyExercisePrem)
}
return(americanFunc)
}
# Test region
params <- list(S0 = 1, r = 0.02, iscall = FALSE)
earlybound <- getEarlyExerciseBoundaryFunc(params, SVI_LocalVol_func(svi_param))
eurprice <- getEuropeanPriceFunc(params, EurImpVol_func(svi_param, params$S0))
ameprice <- getAmericanPriceFunc(params, SVI_LocalVol_func(svi_param), EurImpVol_func(svi_param, params$S0))
ameprice(1.5, 2)
sigma <- impVolFunc(capT-t,K)
setwd("/home/dongniu/capstone")
source("BlackScholes.R")
source("SVILocalVolToEurImpVol.R")
#######################################################
# params       is a list that consists of r, S0, iscall
# localVolFunc is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
# impVolFunc   is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
#######################################################
# formula 3.10
# returns a function that takes valuation time t,
# expiry capT, and strike K
getEarlyExerciseBoundaryFunc <- function(params,localVolFunc){
r <- params$r
func <- function(t,capT,K){
tau <- capT - t
sigl <- localVolFunc(tau,K)
gamma <- sigl/8/pi/r^2/K^2
return( K-sigl*sqrt(tau*log(gamma/tau*(1-2/log(tau/gamma)))) )
}
return(func)
}
# European option price function given implied vol
# returns a function that takes valuation time t
# expiry capT, and strike K
# P(T,K) can be obtained by calling
# getEuropeanPriceFunc(params,impVolFunc)(0,T,K)
getEuropeanPriceFunc <- function(params,impVolFunc){
r <- params$r
S0 <- params$S0
iscall <- params$iscall
if (iscall) {return( function(t,capT,K){BSFormula(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
else {return( function(t,capT,K){BSFormulaPut(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
}
# formula 3.11
# returns a function that takes time to expiry and strike
getAmericanPriceFunc <- function(params,localVolFunc,impVolFunc){
getEarlyExercisePremium <- function(Texp,K){
S0 <- params$S0
r  <- params$r
dPdKFunc <- function(params){
calc <- function(t,capT,K){
print(K)
sigma <- impVolFunc(capT-t,K)
x <- log(S0/K)+r*(capT-t)
sig <- sigma*sqrt(capT-t)
d1 <- x/sig+sig/2
d2 <- d1 - sig
return(pnorm(-d2))
}
return(calc)
}
dt <- Texp/100
############### two 0.01s that need to be taken care of
ts <- seq(0.01,Texp,by=dt)
integrands <- sapply(ts,function(t){dPdKFunc(params)(0.01,t,getEarlyExerciseBoundaryFunc(params,localVolFunc)(t,Texp,K))})
##############
return(r*K*sum(1/2*(integrands[-1]+integrands[-length(integrands)])*dt))
}
americanFunc <- function(Texp,K){
euroOptPrice <- getEuropeanPriceFunc(params,impVolFunc)(0,Texp,K)
earlyExercisePrem <- getEarlyExercisePremium(Texp,K)
return(euroOptPrice+earlyExercisePrem)
}
return(americanFunc)
}
# Test region
params <- list(S0 = 1, r = 0.02, iscall = FALSE)
earlybound <- getEarlyExerciseBoundaryFunc(params, SVI_LocalVol_func(svi_param))
eurprice <- getEuropeanPriceFunc(params, EurImpVol_func(svi_param, params$S0))
ameprice <- getAmericanPriceFunc(params, SVI_LocalVol_func(svi_param), EurImpVol_func(svi_param, params$S0))
iv_F(1.5, 1.336856)
iv_F(1.5, 1.610874)
setwd("/home/dongniu/capstone")
source("BlackScholes.R")
source("SVILocalVolToEurImpVol.R")
#######################################################
# params       is a list that consists of r, S0, iscall
# localVolFunc is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
# impVolFunc   is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
#######################################################
# formula 3.10
# returns a function that takes valuation time t,
# expiry capT, and strike K
getEarlyExerciseBoundaryFunc <- function(params,localVolFunc){
r <- params$r
func <- function(t,capT,K){
tau <- capT - t
sigl <- localVolFunc(tau,K)
gamma <- sigl/8/pi/r^2/K^2
return( K-sigl*sqrt(tau*log(gamma/tau*(1-2/log(tau/gamma)))) )
}
return(func)
}
# European option price function given implied vol
# returns a function that takes valuation time t
# expiry capT, and strike K
# P(T,K) can be obtained by calling
# getEuropeanPriceFunc(params,impVolFunc)(0,T,K)
getEuropeanPriceFunc <- function(params,impVolFunc){
r <- params$r
S0 <- params$S0
iscall <- params$iscall
if (iscall) {return( function(t,capT,K){BSFormula(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
else {return( function(t,capT,K){BSFormulaPut(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
}
# formula 3.11
# returns a function that takes time to expiry and strike
getAmericanPriceFunc <- function(params,localVolFunc,impVolFunc){
getEarlyExercisePremium <- function(Texp,K){
S0 <- params$S0
r  <- params$r
dPdKFunc <- function(params){
calc <- function(t,capT,K){
print(K)
sigma <- impVolFunc(capT-t,K)
x <- log(S0/K)+r*(capT-t)
sig <- sigma*sqrt(capT-t)
d1 <- x/sig+sig/2
d2 <- d1 - sig
return(pnorm(-d2))
}
return(calc)
}
dt <- Texp/100
############### two 0.01s that need to be taken care of
ts <- seq(0.01,Texp,by=dt)
integrands <- sapply(ts,function(t){dPdKFunc(params)(0,t,getEarlyExerciseBoundaryFunc(params,localVolFunc)(t,Texp,K))})
##############
return(r*K*sum(1/2*(integrands[-1]+integrands[-length(integrands)])*dt))
}
americanFunc <- function(Texp,K){
euroOptPrice <- getEuropeanPriceFunc(params,impVolFunc)(0,Texp,K)
earlyExercisePrem <- getEarlyExercisePremium(Texp,K)
return(euroOptPrice+earlyExercisePrem)
}
return(americanFunc)
}
# Test region
params <- list(S0 = 1, r = 0.02, iscall = FALSE)
earlybound <- getEarlyExerciseBoundaryFunc(params, SVI_LocalVol_func(svi_param))
eurprice <- getEuropeanPriceFunc(params, EurImpVol_func(svi_param, params$S0))
ameprice <- getAmericanPriceFunc(params, SVI_LocalVol_func(svi_param), EurImpVol_func(svi_param, params$S0))
ameprice(1.5, 2)
ameprice(1.5, 2)
setwd("/home/dongniu/capstone")
source("BlackScholes.R")
source("SVILocalVolToEurImpVol.R")
#######################################################
# params       is a list that consists of r, S0, iscall
# localVolFunc is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
# impVolFunc   is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
#######################################################
# formula 3.10
# returns a function that takes valuation time t,
# expiry capT, and strike K
getEarlyExerciseBoundaryFunc <- function(params,localVolFunc){
r <- params$r
func <- function(t,capT,K){
tau <- capT - t
sigl <- localVolFunc(tau,K)
gamma <- sigl/8/pi/r^2/K^2
return( K-sigl*sqrt(tau*log(gamma/tau*(1-2/log(tau/gamma)))) )
}
return(func)
}
# European option price function given implied vol
# returns a function that takes valuation time t
# expiry capT, and strike K
# P(T,K) can be obtained by calling
# getEuropeanPriceFunc(params,impVolFunc)(0,T,K)
getEuropeanPriceFunc <- function(params,impVolFunc){
r <- params$r
S0 <- params$S0
iscall <- params$iscall
if (iscall) {return( function(t,capT,K){BSFormula(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
else {return( function(t,capT,K){BSFormulaPut(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
}
# formula 3.11
# returns a function that takes time to expiry and strike
getAmericanPriceFunc <- function(params,localVolFunc,impVolFunc){
getEarlyExercisePremium <- function(Texp,K){
S0 <- params$S0
r  <- params$r
dPdKFunc <- function(params){
calc <- function(t,capT,K){
sigma <- impVolFunc(capT-t,K)
x <- log(S0/K)+r*(capT-t)
sig <- sigma*sqrt(capT-t)
d1 <- x/sig+sig/2
d2 <- d1 - sig
return(pnorm(-d2))
}
return(calc)
}
dt <- Texp/100
############### two 0.01s that need to be taken care of
ts <- seq(0.01,Texp,by=dt)
integrands <- sapply(ts,function(t){dPdKFunc(params)(0,t,getEarlyExerciseBoundaryFunc(params,localVolFunc)(t,Texp,K))})
##############
return(r*K*sum(1/2*(integrands[-1]+integrands[-length(integrands)])*dt))
}
americanFunc <- function(Texp,K){
euroOptPrice <- getEuropeanPriceFunc(params,impVolFunc)(0,Texp,K)
earlyExercisePrem <- getEarlyExercisePremium(Texp,K)
return(euroOptPrice+earlyExercisePrem)
}
return(americanFunc)
}
# Test region
params <- list(S0 = 1, r = 0.02, iscall = FALSE)
earlybound <- getEarlyExerciseBoundaryFunc(params, SVI_LocalVol_func(svi_param))
eurprice <- getEuropeanPriceFunc(params, EurImpVol_func(svi_param, params$S0))
ameprice <- getAmericanPriceFunc(params, SVI_LocalVol_func(svi_param), EurImpVol_func(svi_param, params$S0))
ameprice(1.5, 2)
# SVI parameterization of the local volatility surface
svi_param <- list(a = 0.0012, b = 0.1634, sigma = 0.1029, rho = -0.5555, m = 0.0439)
SVI_LocalVol_slice <- function(param, k, texp){
a <- param$a
b <- param$b
sigma <- param$sigma
rho <- param$rho
m <- param$m
LocVol2 <- a + b * (rho * (k / sqrt(texp) - m) + sqrt((k / sqrt(texp) - m)^2 + sigma^2 * texp))
return(LocVol2)
}
SVI_LocalVol_surface <- function(param, k, time){
surface <- sapply(time, function(x){sqrt(SVI_LocalVol_slice(param, k, x))})
return(surface)
}
SVI_LocalVol_func <- function(param){
func <- function(time, k){
surface <- sapply(time, function(x){sqrt(SVI_LocalVol_slice(param, k, x))})
return(surface)
}
return(func)
}
# SVI_LocalVol_func <- function(param){
#
#   a <- param$a
#   b <- param$b
#   sigma <- param$sigma
#   rho <- param$rho
#   m <- param$m
#   func <- function(texp,k){
#     LocVol2 <- a + b * (rho * (k / sqrt(texp) - m) + sqrt((k / sqrt(texp) - m)^2 + sigma^2 * texp))
#     return(LocVol2)
#   }
#
#   return(func)
#
# }
# European implied volatility from Dupire's estimation (3.6)
# param encloses all the SVI local vol parameters
# X0 is the spot price at time 0
# time range and k = log(K/X0) are needed for specific vols
EurImpVol_func <- function(param, X0){
EurImpVol_slice1 <- function(param, k, texp){
ImpVol <- c()
for(i in 1:length(k)){
# ATM implied vol equals to ATM local vol, no calculation required
if(k[i] == 0){
ImpVol <- c(ImpVol, sqrt(SVI_LocalVol_slice(param, 0, texp)))
next
}
K <- exp(k[i]) * X0
inverse <- function(x){
1 / sqrt(SVI_LocalVol_slice(param, log(x / X0), texp))
}
denominator <- integrate(inverse, X0, K, stop.on.error = FALSE)$value
ImpVol <- c(ImpVol, k[i] / denominator)
}
return(ImpVol)
}
func <- function(time, k){
surface <- sapply(time, function(x){EurImpVol_slice1(param, k, x)})
return(surface)
}
return(func)
}
# EurImpVol_surface <- function(param, k, X0, time){
#
#   EurImpVol_slice <- function(param, k, X0, texp){
#
#     ImpVol <- c()
#
#     for(i in 1:length(k)){
#
#       if(k[i] == 0){
#
#         ImpVol <- c(ImpVol, sqrt(SVI_LocalVol_slice(param, 0, texp)))
#         next
#
#       }
#
#       K <- exp(k[i]) * X0
#       inverse <- function(x){
#
#         1 / sqrt(SVI_LocalVol_slice(param, log(x / X0), texp))
#
#       }
#
#       denominator <- integrate(inverse, X0, K)$value
#       ImpVol <- c(ImpVol, k[i] / denominator)
#
#     }
#     return(ImpVol)
#
#   }
#
#   surface <- sapply(time, function(x){EurImpVol_slice(param, k, X0, x)})
#   return(surface)
#
# }
#
# Test calculation region
#
# k <- seq(-1.0, 1.0, by = 0.02)
# time <- seq(0.1, 1.5, by = 0.1)
#
# localvol <- SVI_LocalVol_surface(param, k, time)
# impvol <- EurImpVol_surface(param, k, 1, time)
#
# persp(k, time, localvol, col="green", phi=30, theta=30,
#       r=1/sqrt(3)*20,d=5,expand=.5,ltheta=-135,lphi=20,ticktype="simple",
#       shade=.8,border=NA,,ylab="Time to Expiration",xlab="Log-Strike k",zlab="Local Volatility", main="SVI Local Vol Surface")
#
# persp(k, time, impvol, col="green", phi=30, theta=30,
#       r=1/sqrt(3)*20,d=5,expand=.5,ltheta=-135,lphi=20,ticktype="simple",
#       shade=.8,border=NA,,ylab="Time to Expiration",xlab="Log-Strike k",zlab="Implied Volatility", main="Implied Vol Surface")
setwd("/home/dongniu/capstone")
source("BlackScholes.R")
source("SVILocalVolToEurImpVol.R")
#######################################################
# params       is a list that consists of r, S0, iscall
# localVolFunc is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
# impVolFunc   is a function that takes time to expiry
#              and strike as arguments and return
#              a single local volatility value
#######################################################
# formula 3.10
# returns a function that takes valuation time t,
# expiry capT, and strike K
getEarlyExerciseBoundaryFunc <- function(params,localVolFunc){
r <- params$r
func <- function(t,capT,K){
tau <- capT - t
sigl <- localVolFunc(tau,K)
gamma <- sigl/8/pi/r^2/K^2
return( K-sigl*sqrt(tau*log(gamma/tau*(1-2/log(tau/gamma)))) )
}
return(func)
}
# European option price function given implied vol
# returns a function that takes valuation time t
# expiry capT, and strike K
# P(T,K) can be obtained by calling
# getEuropeanPriceFunc(params,impVolFunc)(0,T,K)
getEuropeanPriceFunc <- function(params,impVolFunc){
r <- params$r
S0 <- params$S0
iscall <- params$iscall
if (iscall) {return( function(t,capT,K){BSFormula(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
else {return( function(t,capT,K){BSFormulaPut(S0,K,capT-t,r,impVolFunc(capT-t,K))} )}
}
# formula 3.11
# returns a function that takes time to expiry and strike
getAmericanPriceFunc <- function(params,localVolFunc,impVolFunc){
getEarlyExercisePremium <- function(Texp,K){
S0 <- params$S0
r  <- params$r
dPdKFunc <- function(params){
calc <- function(t,capT,K){
sigma <- impVolFunc(capT-t,K)
x <- log(S0/K)+r*(capT-t)
sig <- sigma*sqrt(capT-t)
d1 <- x/sig+sig/2
d2 <- d1 - sig
return(pnorm(-d2))
}
return(calc)
}
dt <- Texp/100
############### two 0.01s that need to be taken care of
ts <- seq(0.01,Texp,by=dt)
integrands <- sapply(ts,function(t){dPdKFunc(params)(0,t,getEarlyExerciseBoundaryFunc(params,localVolFunc)(t,Texp,K))})
##############
return(r*K*sum(1/2*(integrands[-1]+integrands[-length(integrands)])*dt))
}
americanFunc <- function(Texp,K){
euroOptPrice <- getEuropeanPriceFunc(params,impVolFunc)(0,Texp,K)
earlyExercisePrem <- getEarlyExercisePremium(Texp,K)
return(euroOptPrice+earlyExercisePrem)
}
return(americanFunc)
}
# Test region
params <- list(S0 = 1, r = 0.02, iscall = FALSE)
earlybound <- getEarlyExerciseBoundaryFunc(params, SVI_LocalVol_func(svi_param))
eurprice <- getEuropeanPriceFunc(params, EurImpVol_func(svi_param, params$S0))
ameprice <- getAmericanPriceFunc(params, SVI_LocalVol_func(svi_param), EurImpVol_func(svi_param, params$S0))
ameprice(1.5,2)
